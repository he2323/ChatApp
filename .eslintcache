[{"P:\\react+flask\\ChatApp\\src\\index.tsx":"1","P:\\react+flask\\ChatApp\\src\\Styles.tsx":"2","P:\\react+flask\\ChatApp\\src\\Components\\Chat.tsx":"3","P:\\react+flask\\ChatApp\\src\\Components\\Logged.tsx":"4","P:\\react+flask\\ChatApp\\src\\Containers\\StartGreet.tsx":"5","P:\\react+flask\\ChatApp\\src\\Containers\\Register.tsx":"6","P:\\react+flask\\ChatApp\\src\\Containers\\Login.tsx":"7","P:\\react+flask\\ChatApp\\src\\Components\\App.tsx":"8","P:\\react+flask\\ChatApp\\src\\Containers\\InputField.tsx":"9","P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenPerson.tsx":"10","P:\\react+flask\\ChatApp\\src\\Containers\\ChatList.tsx":"11","P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenChat.tsx":"12","P:\\react+flask\\ChatApp\\src\\Containers\\FriendsList.tsx":"13","P:\\react+flask\\ChatApp\\src\\Containers\\Friend.tsx":"14","P:\\react+flask\\ChatApp\\src\\Components\\FriendMng.tsx":"15","P:\\react+flask\\ChatApp\\src\\Containers\\MessasgeHandle.tsx":"16","P:\\react+flask\\ChatApp\\src\\Containers\\RepMsg.tsx":"17"},{"size":422,"mtime":1610839600701,"results":"18","hashOfConfig":"19"},{"size":5005,"mtime":1611269025095,"results":"20","hashOfConfig":"19"},{"size":3790,"mtime":1611268795499,"results":"21","hashOfConfig":"19"},{"size":4386,"mtime":1611008051120,"results":"22","hashOfConfig":"19"},{"size":280,"mtime":1610842564006,"results":"23","hashOfConfig":"19"},{"size":1146,"mtime":1611006403496,"results":"24","hashOfConfig":"19"},{"size":1327,"mtime":1610839600701,"results":"25","hashOfConfig":"19"},{"size":6143,"mtime":1611268679852,"results":"26","hashOfConfig":"19"},{"size":665,"mtime":1611007175584,"results":"27","hashOfConfig":"19"},{"size":442,"mtime":1610840649672,"results":"28","hashOfConfig":"19"},{"size":673,"mtime":1611092642842,"results":"29","hashOfConfig":"19"},{"size":403,"mtime":1610841572206,"results":"30","hashOfConfig":"19"},{"size":764,"mtime":1610840870783,"results":"31","hashOfConfig":"19"},{"size":834,"mtime":1611268987187,"results":"32","hashOfConfig":"19"},{"size":2799,"mtime":1611091530251,"results":"33","hashOfConfig":"19"},{"size":590,"mtime":1611265391836,"results":"34","hashOfConfig":"19"},{"size":321,"mtime":1611267405460,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1tervze",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"P:\\react+flask\\ChatApp\\src\\index.tsx",[],["73","74"],"P:\\react+flask\\ChatApp\\src\\Styles.tsx",[],"P:\\react+flask\\ChatApp\\src\\Components\\Chat.tsx",["75","76","77"],"import { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { ChatMain, ActualChat, Message } from \"../Styles\";\r\nimport ChoosenPerson from \"../Containers/ChoosenPerson\";\r\nimport { SelElementI } from \"./Logged\";\r\nimport ChoosenChat from \"../Containers/ChoosenChat\";\r\nimport StartGreet from \"../Containers/StartGreet\";\r\nimport FriendMng from \"./FriendMng\";\r\nimport MessasgeHandle from \"../Containers/MessasgeHandle\";\r\nimport RepMsg from \"../Containers/RepMsg\"\r\ninterface ChatI {\r\n  logOut: () => void;\r\n  updateUser: () => void;\r\n  selectedElement: SelElementI;\r\n  loggedUserId: number;\r\n}\r\nconst Chat = ({ logOut, updateUser, selectedElement, loggedUserId }: ChatI) => {\r\n  const [sElementInfo, setsElementInfo] = useState({});\r\n  const [fetchMsg, setfetchMsg] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  useEffect(async () => {\r\n    const fetchElementData = async () => {\r\n      console.log(selectedElement);\r\n      const elementResponse = await fetch(\r\n        selectedElement.type === \"friend\" ? \"/user_info\" : \"/chat_info\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            content_type: \"application/json\",\r\n          },\r\n          body: JSON.stringify({ id: selectedElement.id }),\r\n        }\r\n      );\r\n      const elementData = await elementResponse.json();\r\n      console.log(elementData);\r\n      setsElementInfo(elementData);\r\n      setfetchMsg(true);\r\n    };\r\n    const fetchMessages = async () => {\r\n      console.log(sElementInfo);\r\n      const fetchedMessages = await fetch(\"/messages_info\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          content_type: \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          messages_ids:\r\n            sElementInfo.messages\r\n        }),\r\n      });\r\n      const messagesData = await fetchedMessages.json();\r\n      setMessages(messagesData.messages);\r\n      console.log(messagesData.messages);\r\n    };\r\n    if (selectedElement.type !== \"start\") {\r\n      await fetchElementData();\r\n      if (\r\n        selectedElement.type === \"chat\" &&\r\n        sElementInfo.messages !== undefined\r\n      )\r\n        await fetchMessages();\r\n    }\r\n    \r\n  }, [selectedElement]);\r\n  const sendMsg = async () => {\r\n    await fetch(\"/post_msg\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        content_type: \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        message: message,\r\n        sender_id: loggedUserId,\r\n        chat_id: selectedElement.id,\r\n      }),\r\n    });\r\n    await updateUser();\r\n    setfetchMsg(!fetchMsg);\r\n  };\r\n\r\n  return (\r\n    <ChatMain>\r\n      {selectedElement.type === \"friend\" ? (\r\n        <ChoosenPerson\r\n          logOut={logOut}\r\n          image={sElementInfo.image_link}\r\n          name={sElementInfo.name}\r\n        />\r\n      ) : selectedElement.type === \"chat\" ? (\r\n        <ChoosenChat\r\n          logOut={logOut}\r\n          image={sElementInfo.image_link}\r\n          name={sElementInfo.name}\r\n        />\r\n      ) : (\r\n        <StartGreet />\r\n      )}\r\n\r\n      {selectedElement.type === \"chat\" ? (\r\n        <ActualChat>\r\n          <RepMsg loggedUserId = {loggedUserId} messages={messages}/>\r\n          <button onClick={() => console.log(selectedElement)}>\r\n            selected user log\r\n          </button>\r\n        </ActualChat>\r\n      ) : selectedElement.type === \"friend\" ? (\r\n        <FriendMng\r\n          updateUser={updateUser}\r\n          selectedElement={selectedElement}\r\n          loggedUser={loggedUserId}\r\n        />\r\n      ) : (\r\n        <StartGreet isPlaceholder={true} />\r\n      )}\r\n      <MessasgeHandle\r\n        message={message}\r\n        changeMessage={setMessage}\r\n        sendMsg={sendMsg}\r\n      />\r\n    </ChatMain>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","P:\\react+flask\\ChatApp\\src\\Components\\Logged.tsx",["78","79","80","81"],"import React from \"react\";\r\nimport {\r\n  ContactsList,\r\n  ModeSelect,\r\n  SearchBar,\r\n  Constacts,\r\n  SearchBox,\r\n  CrossDel,\r\n  ModeOption,\r\n  SearchUsers,\r\n} from \"../Styles\";\r\nimport { useState, useEffect } from \"react\";\r\nimport FriendsList from \"../Containers/FriendsList\";\r\nimport ChatList from \"../Containers/ChatList\";\r\nimport { ImCross } from \"react-icons/im\";\r\nexport interface SelElementI {\r\n  id: number;\r\n  type: \"friend\" | \"chat\" | \"start\";\r\n}\r\nexport interface UserO {\r\n  user_friends: number[];\r\n  loggedUserId: number;\r\n  selectedMode: string;\r\n  selectElement: ({ id, type }: SelElementI) => any;\r\n  selectMode: (mode: string) => any;\r\n}\r\nexport interface ElementI {\r\n  id: number;\r\n  name: string;\r\n  img_link: string;\r\n  status: boolean;\r\n}\r\n\r\nconst Logged = ({\r\n  user_friends,\r\n  loggedUserId,\r\n  selectedMode,\r\n  selectMode,\r\n  selectElement,\r\n}: UserO) => {\r\n  const [user_friends_data_list, setUser_friends_data_list] = useState([]);\r\n  const [user_chat_data_list, setuser_chat_data_list] = useState([]);\r\n  const [options, setOptions] = useState([\r\n    { label: \"Start\", value: \"startingPage\" },\r\n    { label: \"Friends\", value: \"friends\" },\r\n    { label: \"Chats\", value: \"chats\" },\r\n  ]);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [similarUsers, setSimilarUsers] = useState([]);\r\n  useEffect(() => {\r\n    const fetchUserFriendsData = async () => {\r\n      const response = await fetch(`/friends_info`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          content_type: \"application/json\",\r\n        },\r\n        body: JSON.stringify({ ids: user_friends }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      await setUser_friends_data_list(data.list);\r\n    };\r\n    const fetchUserChatsData = async () => {\r\n      const response = await fetch(`/chats`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          content_type: \"application/json\",\r\n        },\r\n        body: JSON.stringify({ id: loggedUserId }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      await setuser_chat_data_list(data.list);\r\n    };\r\n    if (user_friends.length > 0) fetchUserFriendsData();\r\n    fetchUserChatsData();\r\n  }, [user_friends]);\r\n  const show_dropdown = () => {};\r\n  const get_users = async () => {\r\n    const response = await fetch(\"/search_user\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        content_type: \"application/json\",\r\n      },\r\n      body: JSON.stringify({ text: searchText }),\r\n    });\r\n    const data = await response.json();\r\n    await setSimilarUsers(data.list);\r\n  };\r\n  useEffect(() => {\r\n    if(searchText) get_users();\r\n  }, [searchText]);\r\n  return (\r\n    <ContactsList>\r\n      <ModeSelect\r\n        defaultValue={selectedMode}\r\n        onChange={(event: any) => {\r\n          selectMode(event.currentTarget.value);\r\n          if (event.currentTarget.value === \"startingPage\")\r\n            selectElement({ id: 0, type: \"start\" });\r\n        }}\r\n      >\r\n        {options.map((option: any) => (\r\n          <ModeOption key={option.value} value={option.value}>\r\n            {option.label}\r\n          </ModeOption>\r\n        ))}\r\n      </ModeSelect>\r\n      <SearchBox>\r\n        <SearchBar\r\n          type=\"text\"\r\n          value={searchText}\r\n          onChange={(event: any) => setSearchText(event.currentTarget.value)}\r\n          placeholder=\"Search..\"\r\n          onKeyUp={get_users}\r\n        />\r\n        <CrossDel onClick={() => setSearchText(\"\")}>\r\n          <ImCross />\r\n        </CrossDel>\r\n      </SearchBox>\r\n      {searchText ? (\r\n        <SearchUsers onClick={() => setSearchText(\"\")}>\r\n          <FriendsList\r\n            friends_data={similarUsers}\r\n            loggedUserId={loggedUserId}\r\n            selectUser={selectElement}\r\n          />\r\n        </SearchUsers>\r\n      ) : null}\r\n      <Constacts big={user_friends.length > 10 ? 1 : 0}>\r\n        {selectedMode === \"friends\" ? (\r\n          <FriendsList\r\n            friends_data={user_friends_data_list}\r\n            loggedUserId={loggedUserId}\r\n            selectUser={selectElement}\r\n          />\r\n        ) : selectedMode === \"chats\" ? (\r\n          <ChatList\r\n            chats_data={user_chat_data_list}\r\n            loggedUserId={loggedUserId}\r\n            selectChat={selectElement}\r\n          />\r\n        ) : (\r\n          \"Greeting on chat app!\"\r\n        )}\r\n      </Constacts>\r\n    </ContactsList>\r\n  );\r\n};\r\n\r\nexport default Logged;\r\n","P:\\react+flask\\ChatApp\\src\\Containers\\StartGreet.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\Register.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\Login.tsx",[],"P:\\react+flask\\ChatApp\\src\\Components\\App.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\InputField.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenPerson.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\ChatList.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenChat.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\FriendsList.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\Friend.tsx",[],"P:\\react+flask\\ChatApp\\src\\Components\\FriendMng.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\MessasgeHandle.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\RepMsg.tsx",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":3,"column":32,"nodeType":"88","messageId":"89","endLine":3,"endColumn":39},{"ruleId":"90","severity":1,"message":"91","line":22,"column":13,"nodeType":"92","endLine":65,"endColumn":4},{"ruleId":"90","severity":1,"message":"93","line":65,"column":6,"nodeType":"94","endLine":65,"endColumn":23,"suggestions":"95"},{"ruleId":"86","severity":1,"message":"96","line":43,"column":19,"nodeType":"88","messageId":"89","endLine":43,"endColumn":29},{"ruleId":"90","severity":1,"message":"97","line":77,"column":6,"nodeType":"94","endLine":77,"endColumn":20,"suggestions":"98"},{"ruleId":"86","severity":1,"message":"99","line":78,"column":9,"nodeType":"88","messageId":"89","endLine":78,"endColumn":22},{"ruleId":"90","severity":1,"message":"100","line":92,"column":6,"nodeType":"94","endLine":92,"endColumn":18,"suggestions":"101"},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"@typescript-eslint/no-unused-vars","'Message' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'sElementInfo'. Either include it or remove the dependency array.","ArrayExpression",["104"],"'setOptions' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loggedUserId'. Either include it or remove the dependency array.",["105"],"'show_dropdown' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'get_users'. Either include it or remove the dependency array.",["106"],"no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [sElementInfo, selectedElement]",{"range":"113","text":"114"},"Update the dependencies array to be: [loggedUserId, user_friends]",{"range":"115","text":"116"},"Update the dependencies array to be: [get_users, searchText]",{"range":"117","text":"118"},[2230,2247],"[sElementInfo, selectedElement]",[2169,2183],"[loggedUserId, user_friends]",[2608,2620],"[get_users, searchText]"]