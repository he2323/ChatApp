[{"P:\\react+flask\\ChatApp\\src\\index.tsx":"1","P:\\react+flask\\ChatApp\\src\\Styles.tsx":"2","P:\\react+flask\\ChatApp\\src\\Components\\Chat.tsx":"3","P:\\react+flask\\ChatApp\\src\\Components\\Logged.tsx":"4","P:\\react+flask\\ChatApp\\src\\Containers\\StartGreet.tsx":"5","P:\\react+flask\\ChatApp\\src\\Containers\\Register.tsx":"6","P:\\react+flask\\ChatApp\\src\\Containers\\Login.tsx":"7","P:\\react+flask\\ChatApp\\src\\Components\\App.tsx":"8","P:\\react+flask\\ChatApp\\src\\Containers\\InputField.tsx":"9","P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenPerson.tsx":"10","P:\\react+flask\\ChatApp\\src\\Containers\\ChatList.tsx":"11","P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenChat.tsx":"12","P:\\react+flask\\ChatApp\\src\\Containers\\FriendsList.tsx":"13","P:\\react+flask\\ChatApp\\src\\Containers\\Friend.tsx":"14","P:\\react+flask\\ChatApp\\src\\Components\\FriendMng.tsx":"15"},{"size":422,"mtime":1610839600701,"results":"16","hashOfConfig":"17"},{"size":4965,"mtime":1611008013285,"results":"18","hashOfConfig":"17"},{"size":3014,"mtime":1611093268175,"results":"19","hashOfConfig":"17"},{"size":4386,"mtime":1611008051120,"results":"20","hashOfConfig":"17"},{"size":280,"mtime":1610842564006,"results":"21","hashOfConfig":"17"},{"size":1146,"mtime":1611006403496,"results":"22","hashOfConfig":"17"},{"size":1327,"mtime":1610839600701,"results":"23","hashOfConfig":"17"},{"size":5874,"mtime":1611089128418,"results":"24","hashOfConfig":"17"},{"size":665,"mtime":1611007175584,"results":"25","hashOfConfig":"17"},{"size":442,"mtime":1610840649672,"results":"26","hashOfConfig":"17"},{"size":673,"mtime":1611092642842,"results":"27","hashOfConfig":"17"},{"size":403,"mtime":1610841572206,"results":"28","hashOfConfig":"17"},{"size":764,"mtime":1610840870783,"results":"29","hashOfConfig":"17"},{"size":926,"mtime":1611092614196,"results":"30","hashOfConfig":"17"},{"size":2799,"mtime":1611091530251,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1tervze",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"P:\\react+flask\\ChatApp\\src\\index.tsx",[],["64","65"],"P:\\react+flask\\ChatApp\\src\\Styles.tsx",[],"P:\\react+flask\\ChatApp\\src\\Components\\Chat.tsx",["66","67"],"P:\\react+flask\\ChatApp\\src\\Components\\Logged.tsx",["68","69","70","71"],"import React from \"react\";\r\nimport {\r\n  ContactsList,\r\n  ModeSelect,\r\n  SearchBar,\r\n  Constacts,\r\n  SearchBox,\r\n  CrossDel,\r\n  ModeOption,\r\n  SearchUsers,\r\n} from \"../Styles\";\r\nimport { useState, useEffect } from \"react\";\r\nimport FriendsList from \"../Containers/FriendsList\";\r\nimport ChatList from \"../Containers/ChatList\";\r\nimport { ImCross } from \"react-icons/im\";\r\nexport interface SelElementI {\r\n  id: number;\r\n  type: \"friend\" | \"chat\" | \"start\";\r\n}\r\nexport interface UserO {\r\n  user_friends: number[];\r\n  loggedUserId: number;\r\n  selectedMode: string;\r\n  selectElement: ({ id, type }: SelElementI) => any;\r\n  selectMode: (mode: string) => any;\r\n}\r\nexport interface ElementI {\r\n  id: number;\r\n  name: string;\r\n  img_link: string;\r\n  status: boolean;\r\n}\r\n\r\nconst Logged = ({\r\n  user_friends,\r\n  loggedUserId,\r\n  selectedMode,\r\n  selectMode,\r\n  selectElement,\r\n}: UserO) => {\r\n  const [user_friends_data_list, setUser_friends_data_list] = useState([]);\r\n  const [user_chat_data_list, setuser_chat_data_list] = useState([]);\r\n  const [options, setOptions] = useState([\r\n    { label: \"Start\", value: \"startingPage\" },\r\n    { label: \"Friends\", value: \"friends\" },\r\n    { label: \"Chats\", value: \"chats\" },\r\n  ]);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [similarUsers, setSimilarUsers] = useState([]);\r\n  useEffect(() => {\r\n    const fetchUserFriendsData = async () => {\r\n      const response = await fetch(`/friends_info`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          content_type: \"application/json\",\r\n        },\r\n        body: JSON.stringify({ ids: user_friends }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      await setUser_friends_data_list(data.list);\r\n    };\r\n    const fetchUserChatsData = async () => {\r\n      const response = await fetch(`/chats`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          content_type: \"application/json\",\r\n        },\r\n        body: JSON.stringify({ id: loggedUserId }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      await setuser_chat_data_list(data.list);\r\n    };\r\n    if (user_friends.length > 0) fetchUserFriendsData();\r\n    fetchUserChatsData();\r\n  }, [user_friends]);\r\n  const show_dropdown = () => {};\r\n  const get_users = async () => {\r\n    const response = await fetch(\"/search_user\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        content_type: \"application/json\",\r\n      },\r\n      body: JSON.stringify({ text: searchText }),\r\n    });\r\n    const data = await response.json();\r\n    await setSimilarUsers(data.list);\r\n  };\r\n  useEffect(() => {\r\n    if(searchText) get_users();\r\n  }, [searchText]);\r\n  return (\r\n    <ContactsList>\r\n      <ModeSelect\r\n        defaultValue={selectedMode}\r\n        onChange={(event: any) => {\r\n          selectMode(event.currentTarget.value);\r\n          if (event.currentTarget.value === \"startingPage\")\r\n            selectElement({ id: 0, type: \"start\" });\r\n        }}\r\n      >\r\n        {options.map((option: any) => (\r\n          <ModeOption key={option.value} value={option.value}>\r\n            {option.label}\r\n          </ModeOption>\r\n        ))}\r\n      </ModeSelect>\r\n      <SearchBox>\r\n        <SearchBar\r\n          type=\"text\"\r\n          value={searchText}\r\n          onChange={(event: any) => setSearchText(event.currentTarget.value)}\r\n          placeholder=\"Search..\"\r\n          onKeyUp={get_users}\r\n        />\r\n        <CrossDel onClick={() => setSearchText(\"\")}>\r\n          <ImCross />\r\n        </CrossDel>\r\n      </SearchBox>\r\n      {searchText ? (\r\n        <SearchUsers onClick={() => setSearchText(\"\")}>\r\n          <FriendsList\r\n            friends_data={similarUsers}\r\n            loggedUserId={loggedUserId}\r\n            selectUser={selectElement}\r\n          />\r\n        </SearchUsers>\r\n      ) : null}\r\n      <Constacts big={user_friends.length > 10 ? 1 : 0}>\r\n        {selectedMode === \"friends\" ? (\r\n          <FriendsList\r\n            friends_data={user_friends_data_list}\r\n            loggedUserId={loggedUserId}\r\n            selectUser={selectElement}\r\n          />\r\n        ) : selectedMode === \"chats\" ? (\r\n          <ChatList\r\n            chats_data={user_chat_data_list}\r\n            loggedUserId={loggedUserId}\r\n            selectChat={selectElement}\r\n          />\r\n        ) : (\r\n          \"Greeting on chat app!\"\r\n        )}\r\n      </Constacts>\r\n    </ContactsList>\r\n  );\r\n};\r\n\r\nexport default Logged;\r\n","P:\\react+flask\\ChatApp\\src\\Containers\\StartGreet.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\Register.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\Login.tsx",[],"P:\\react+flask\\ChatApp\\src\\Components\\App.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\InputField.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenPerson.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\ChatList.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenChat.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\FriendsList.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\Friend.tsx",[],"P:\\react+flask\\ChatApp\\src\\Components\\FriendMng.tsx",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":49,"column":6,"nodeType":"78","endLine":49,"endColumn":23,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":71,"column":36,"nodeType":"82","messageId":"83","endLine":71,"endColumn":38},{"ruleId":"84","severity":1,"message":"85","line":43,"column":19,"nodeType":"86","messageId":"87","endLine":43,"endColumn":29},{"ruleId":"76","severity":1,"message":"88","line":77,"column":6,"nodeType":"78","endLine":77,"endColumn":20,"suggestions":"89"},{"ruleId":"84","severity":1,"message":"90","line":78,"column":9,"nodeType":"86","messageId":"87","endLine":78,"endColumn":22},{"ruleId":"76","severity":1,"message":"91","line":92,"column":6,"nodeType":"78","endLine":92,"endColumn":18,"suggestions":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sElementInfo.messages'. Either include it or remove the dependency array.","ArrayExpression",["95"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","@typescript-eslint/no-unused-vars","'setOptions' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'loggedUserId'. Either include it or remove the dependency array.",["96"],"'show_dropdown' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'get_users'. Either include it or remove the dependency array.",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [sElementInfo.messages, selectedElement]",{"range":"104","text":"105"},"Update the dependencies array to be: [loggedUserId, user_friends]",{"range":"106","text":"107"},"Update the dependencies array to be: [get_users, searchText]",{"range":"108","text":"109"},[1737,1754],"[sElementInfo.messages, selectedElement]",[2169,2183],"[loggedUserId, user_friends]",[2608,2620],"[get_users, searchText]"]