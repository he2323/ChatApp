[{"P:\\react+flask\\ChatApp\\src\\index.tsx":"1","P:\\react+flask\\ChatApp\\src\\Styles.tsx":"2","P:\\react+flask\\ChatApp\\src\\Components\\Chat.tsx":"3","P:\\react+flask\\ChatApp\\src\\Components\\Logged.tsx":"4","P:\\react+flask\\ChatApp\\src\\Containers\\StartGreet.tsx":"5","P:\\react+flask\\ChatApp\\src\\Containers\\Register.tsx":"6","P:\\react+flask\\ChatApp\\src\\Containers\\Login.tsx":"7","P:\\react+flask\\ChatApp\\src\\Components\\App.tsx":"8","P:\\react+flask\\ChatApp\\src\\Containers\\InputField.tsx":"9","P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenPerson.tsx":"10","P:\\react+flask\\ChatApp\\src\\Containers\\ChatList.tsx":"11","P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenChat.tsx":"12","P:\\react+flask\\ChatApp\\src\\Containers\\FriendsList.tsx":"13","P:\\react+flask\\ChatApp\\src\\Containers\\Friend.tsx":"14","P:\\react+flask\\ChatApp\\src\\Components\\FriendMng.tsx":"15","P:\\react+flask\\ChatApp\\src\\Containers\\MessasgeHandle.tsx":"16","P:\\react+flask\\ChatApp\\src\\Containers\\RepMsg.tsx":"17"},{"size":422,"mtime":1610839600701,"results":"18","hashOfConfig":"19"},{"size":5007,"mtime":1611345516713,"results":"20","hashOfConfig":"19"},{"size":4471,"mtime":1611348123270,"results":"21","hashOfConfig":"19"},{"size":4386,"mtime":1611008051120,"results":"22","hashOfConfig":"19"},{"size":280,"mtime":1610842564006,"results":"23","hashOfConfig":"19"},{"size":1146,"mtime":1611006403496,"results":"24","hashOfConfig":"19"},{"size":1327,"mtime":1610839600701,"results":"25","hashOfConfig":"19"},{"size":6755,"mtime":1611347767338,"results":"26","hashOfConfig":"19"},{"size":665,"mtime":1611007175584,"results":"27","hashOfConfig":"19"},{"size":442,"mtime":1610840649672,"results":"28","hashOfConfig":"19"},{"size":673,"mtime":1611092642842,"results":"29","hashOfConfig":"19"},{"size":403,"mtime":1610841572206,"results":"30","hashOfConfig":"19"},{"size":764,"mtime":1610840870783,"results":"31","hashOfConfig":"19"},{"size":834,"mtime":1611268987187,"results":"32","hashOfConfig":"19"},{"size":2799,"mtime":1611091530251,"results":"33","hashOfConfig":"19"},{"size":590,"mtime":1611265391836,"results":"34","hashOfConfig":"19"},{"size":387,"mtime":1611345712838,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1tervze",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"P:\\react+flask\\ChatApp\\src\\index.tsx",[],["73","74"],"P:\\react+flask\\ChatApp\\src\\Styles.tsx",[],"P:\\react+flask\\ChatApp\\src\\Components\\Chat.tsx",["75","76","77","78"],"P:\\react+flask\\ChatApp\\src\\Components\\Logged.tsx",["79","80","81","82"],"import React from \"react\";\r\nimport {\r\n  ContactsList,\r\n  ModeSelect,\r\n  SearchBar,\r\n  Constacts,\r\n  SearchBox,\r\n  CrossDel,\r\n  ModeOption,\r\n  SearchUsers,\r\n} from \"../Styles\";\r\nimport { useState, useEffect } from \"react\";\r\nimport FriendsList from \"../Containers/FriendsList\";\r\nimport ChatList from \"../Containers/ChatList\";\r\nimport { ImCross } from \"react-icons/im\";\r\nexport interface SelElementI {\r\n  id: number;\r\n  type: \"friend\" | \"chat\" | \"start\";\r\n}\r\nexport interface UserO {\r\n  user_friends: number[];\r\n  loggedUserId: number;\r\n  selectedMode: string;\r\n  selectElement: ({ id, type }: SelElementI) => any;\r\n  selectMode: (mode: string) => any;\r\n}\r\nexport interface ElementI {\r\n  id: number;\r\n  name: string;\r\n  img_link: string;\r\n  status: boolean;\r\n}\r\n\r\nconst Logged = ({\r\n  user_friends,\r\n  loggedUserId,\r\n  selectedMode,\r\n  selectMode,\r\n  selectElement,\r\n}: UserO) => {\r\n  const [user_friends_data_list, setUser_friends_data_list] = useState([]);\r\n  const [user_chat_data_list, setuser_chat_data_list] = useState([]);\r\n  const [options, setOptions] = useState([\r\n    { label: \"Start\", value: \"startingPage\" },\r\n    { label: \"Friends\", value: \"friends\" },\r\n    { label: \"Chats\", value: \"chats\" },\r\n  ]);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [similarUsers, setSimilarUsers] = useState([]);\r\n  useEffect(() => {\r\n    const fetchUserFriendsData = async () => {\r\n      const response = await fetch(`/friends_info`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          content_type: \"application/json\",\r\n        },\r\n        body: JSON.stringify({ ids: user_friends }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      await setUser_friends_data_list(data.list);\r\n    };\r\n    const fetchUserChatsData = async () => {\r\n      const response = await fetch(`/chats`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          content_type: \"application/json\",\r\n        },\r\n        body: JSON.stringify({ id: loggedUserId }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      await setuser_chat_data_list(data.list);\r\n    };\r\n    if (user_friends.length > 0) fetchUserFriendsData();\r\n    fetchUserChatsData();\r\n  }, [user_friends]);\r\n  const show_dropdown = () => {};\r\n  const get_users = async () => {\r\n    const response = await fetch(\"/search_user\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        content_type: \"application/json\",\r\n      },\r\n      body: JSON.stringify({ text: searchText }),\r\n    });\r\n    const data = await response.json();\r\n    await setSimilarUsers(data.list);\r\n  };\r\n  useEffect(() => {\r\n    if(searchText) get_users();\r\n  }, [searchText]);\r\n  return (\r\n    <ContactsList>\r\n      <ModeSelect\r\n        defaultValue={selectedMode}\r\n        onChange={(event: any) => {\r\n          selectMode(event.currentTarget.value);\r\n          if (event.currentTarget.value === \"startingPage\")\r\n            selectElement({ id: 0, type: \"start\" });\r\n        }}\r\n      >\r\n        {options.map((option: any) => (\r\n          <ModeOption key={option.value} value={option.value}>\r\n            {option.label}\r\n          </ModeOption>\r\n        ))}\r\n      </ModeSelect>\r\n      <SearchBox>\r\n        <SearchBar\r\n          type=\"text\"\r\n          value={searchText}\r\n          onChange={(event: any) => setSearchText(event.currentTarget.value)}\r\n          placeholder=\"Search..\"\r\n          onKeyUp={get_users}\r\n        />\r\n        <CrossDel onClick={() => setSearchText(\"\")}>\r\n          <ImCross />\r\n        </CrossDel>\r\n      </SearchBox>\r\n      {searchText ? (\r\n        <SearchUsers onClick={() => setSearchText(\"\")}>\r\n          <FriendsList\r\n            friends_data={similarUsers}\r\n            loggedUserId={loggedUserId}\r\n            selectUser={selectElement}\r\n          />\r\n        </SearchUsers>\r\n      ) : null}\r\n      <Constacts big={user_friends.length > 10 ? 1 : 0}>\r\n        {selectedMode === \"friends\" ? (\r\n          <FriendsList\r\n            friends_data={user_friends_data_list}\r\n            loggedUserId={loggedUserId}\r\n            selectUser={selectElement}\r\n          />\r\n        ) : selectedMode === \"chats\" ? (\r\n          <ChatList\r\n            chats_data={user_chat_data_list}\r\n            loggedUserId={loggedUserId}\r\n            selectChat={selectElement}\r\n          />\r\n        ) : (\r\n          \"Greeting on chat app!\"\r\n        )}\r\n      </Constacts>\r\n    </ContactsList>\r\n  );\r\n};\r\n\r\nexport default Logged;\r\n","P:\\react+flask\\ChatApp\\src\\Containers\\StartGreet.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\Register.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\Login.tsx",[],"P:\\react+flask\\ChatApp\\src\\Components\\App.tsx",["83"],"// eslint-disable-next-line\nimport { useState, useEffect } from \"react\";\nimport { useBeforeunload } from \"react-beforeunload\";\nimport { useIdle } from \"react-use\";\nimport Chat from \"./Chat\";\nimport Login from \"../Containers/Login\";\nimport Register from \"../Containers/Register\";\nimport Logged from \"./Logged\";\nimport { MainBody, MainApp } from \"../Styles\";\nimport { HiMail, HiLockClosed } from \"react-icons/hi\";\nimport { isIdentifier } from \"typescript\";\nimport { useInterval } from \"react-use\";\n\nexport type registerItemT = {\n  icon: any;\n  type: string;\n  placeholder: string;\n  value: string;\n  changeFun: () => void;\n};\n\nconst App = () => {\n  const isIdle = useIdle(5000);\n  //data to store\n  const [userLogged, setUserLogged] = useState(false);\n  const [loggedUser, setLoggedUser] = useState({});\n  const [userHaveAccount, setUserHaveAccount] = useState(true);\n  const [mail, setMail] = useState(\"admin\");\n  const [password, setPassword] = useState(\"admin\");\n  const [name, setName] = useState(\"\");\n  const [nickname, setNickname] = useState(\"\");\n  const [image_link, setImage_link] = useState(\"\");\n  const [selectedMode, setSelectedMode] = useState(\"startingPage\");\n  // eslint-disable-next-line\n  const [privilege_level, setPrivilege_level] = useState(1); // (0- guest, 1- user, 3-admin) base 1, couse its for normal registration, still no guest login, and admin is speciall hcanging only in database\n  const [selectedElement, setSelectedElement] = useState({\n    id: 0,\n    type: \"start\",\n  }); //store selected user id\n  //basic navigation\n  const [registerItems, setRegisterItems] = useState();\n\n  useEffect(() => {\n    setRegisterItems([\n      {\n        icon: <HiLockClosed />,\n        type: \"text\",\n        placeholder: \"name\",\n        value: name,\n        changeFun: setName,\n      },\n      {\n        icon: <HiMail />,\n        type: \"email\",\n        placeholder: \"mail\",\n        value: mail,\n        changeFun: setMail,\n      },\n      {\n        icon: <HiLockClosed />,\n        type: \"password\",\n        placeholder: \"password\",\n        value: password,\n        changeFun: setPassword,\n      },\n      {\n        icon: <HiLockClosed />,\n        type: \"text\",\n        placeholder: \"nickname\",\n        value: nickname,\n        changeFun: setNickname,\n      },\n      {\n        icon: <HiLockClosed />,\n        type: \"text\",\n        placeholder: \"image link\",\n        value: image_link,\n        changeFun: setImage_link,\n      },\n    ]);\n  }, [name, mail, password, nickname, image_link]);\n\n  const toRegister = (): void => setUserHaveAccount(false);\n  const changeUserStatus = (id: number, status: boolean) =>\n    fetch(`/status_change`, {\n      method: \"POST\",\n      headers: {\n        content_type: \"application/json\",\n      },\n      body: JSON.stringify({ id: id, status: status }),\n    });\n  const logOut = () => {\n    changeUserStatus(loggedUser._id, false);\n    setSelectedElement(1);\n    setUserLogged(false);\n    setLoggedUser({});\n  };\n\n  const registerUser = async () => {\n    const datas = {\n      mail: mail,\n      password: password,\n      name: name,\n      nickname: nickname,\n      image_link: image_link,\n      privilege_level: privilege_level,\n    };\n    const response = await fetch(`/register`, {\n      method: \"POST\",\n      headers: {\n        content_type: \"application/json\",\n      },\n      body: JSON.stringify(datas),\n    });\n    const data = await response.json();\n    if (data.res) {\n      console.log(\"udało się utworzyć użytkownia\");\n      setUserHaveAccount(true);\n    } else {\n      console.log(\"nie udało się utworzyć użytkownia\");\n    }\n  };\n\n  const logIn = async () => {\n    if (mail.length > 0 && password.length > 0) {\n      const datas = { mail: mail, password: password };\n      const response = await fetch(`/login`, {\n        method: \"POST\",\n        headers: {\n          content_type: \"application/json\",\n        },\n        body: JSON.stringify(datas),\n      });\n      const data = await response.json();\n      if (data.err === false) {\n        setLoggedUser(data);\n        setUserLogged(true);\n        changeUserStatus(data._id, true);\n      } else {\n        alert(\"bad pass or mail\");\n      }\n    } else alert(\"to short\");\n  };\n  // eslint-disable-next-line\n  const deleteUser = (id: number) => {\n    fetch(`/deleteUser`, {\n      method: \"POST\",\n      headers: {\n        content_type: \"application/json\",\n      },\n      body: JSON.stringify({ id: id }),\n    }).then(updateUser);\n  };\n  const updateUser = async () => {\n    const response = await fetch(`/user_info`, {\n      method: \"POST\",\n      headers: {\n        content_type: \"application/json\",\n      },\n      body: JSON.stringify({ id: loggedUser._id }),\n    });\n    const data = await response.json();\n    await setLoggedUser(data);\n    return data.status;\n  };\n\n  useInterval(\n    () => {\n      if (loggedUser._id) {\n        if (isIdle && loggedUser.status) {\n          changeUserStatus(loggedUser._id, false);\n          updateUser();\n        } else {\n          changeUserStatus(loggedUser._id, true);\n          updateUser();\n        }\n      }\n    },\n    loggedUser ? 5000 : null\n  );\n  useBeforeunload(() => {\n    if (userLogged) {\n      const status = updateUser();\n      console.log(loggedUser);\n      if (status) {\n        changeUserStatus(loggedUser._id, false);\n        return \"You'll lose your data!\";\n      }\n    } else return;\n  });\n  // useEffect(() => {\n  //   const interval = setInterval(async () => {\n  //     console.log(\"every 5 sec\");\n  //     console.log(Date.now());\n  //     console.log(selectedElement);\n  //     setSelectedElement(selectedElement)\n  //   }, 5000)\n  //   return () => clearInterval(interval)\n  // }, [selectedElement])\n  return (\n    <MainBody>\n      {userLogged ? (\n        <MainApp>\n          <Logged\n            loggedUserId={loggedUser._id}\n            user_friends={loggedUser.friends_ids}\n            selectedMode={selectedMode}\n            selectElement={setSelectedElement}\n            selectMode={setSelectedMode}\n          />\n          <Chat\n            loggedUSer={loggedUser}\n            updateUser={updateUser}\n            logOut={logOut}\n            selectedElement={selectedElement}\n            loggedUserId={loggedUser._id}\n          />\n        </MainApp>\n      ) : userHaveAccount ? (\n        <Login\n          mail={mail}\n          password={password}\n          changeMail={setMail}\n          changePassword={setPassword}\n          toRegister={toRegister}\n          logIn={logIn}\n        ></Login>\n      ) : (\n        <Register\n          registerItems={registerItems}\n          register={registerUser}\n          toLogin={setUserHaveAccount}\n        ></Register>\n      )}\n      <button onClick={() => console.log(selectedElement)}>log</button>\n    </MainBody>\n  );\n};\n\nexport default App;\n","P:\\react+flask\\ChatApp\\src\\Containers\\InputField.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenPerson.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\ChatList.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenChat.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\FriendsList.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\Friend.tsx",[],"P:\\react+flask\\ChatApp\\src\\Components\\FriendMng.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\MessasgeHandle.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\RepMsg.tsx",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":3,"column":32,"nodeType":"90","messageId":"91","endLine":3,"endColumn":39},{"ruleId":"88","severity":1,"message":"92","line":12,"column":10,"nodeType":"90","messageId":"91","endLine":12,"endColumn":21},{"ruleId":"93","severity":1,"message":"94","line":87,"column":13,"nodeType":"95","endLine":93,"endColumn":4},{"ruleId":"93","severity":1,"message":"96","line":93,"column":6,"nodeType":"97","endLine":93,"endColumn":45,"suggestions":"98"},{"ruleId":"88","severity":1,"message":"99","line":43,"column":19,"nodeType":"90","messageId":"91","endLine":43,"endColumn":29},{"ruleId":"93","severity":1,"message":"100","line":77,"column":6,"nodeType":"97","endLine":77,"endColumn":20,"suggestions":"101"},{"ruleId":"88","severity":1,"message":"102","line":78,"column":9,"nodeType":"90","messageId":"91","endLine":78,"endColumn":22},{"ruleId":"93","severity":1,"message":"103","line":92,"column":6,"nodeType":"97","endLine":92,"endColumn":18,"suggestions":"104"},{"ruleId":"88","severity":1,"message":"105","line":11,"column":10,"nodeType":"90","messageId":"91","endLine":11,"endColumn":22},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"@typescript-eslint/no-unused-vars","'Message' is defined but never used.","Identifier","unusedVar","'useInterval' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'fetchElementData'. Either include it or remove the dependency array.","ArrayExpression",["108"],"'setOptions' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loggedUserId'. Either include it or remove the dependency array.",["109"],"'show_dropdown' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'get_users'. Either include it or remove the dependency array.",["110"],"'isIdentifier' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},"Update the dependencies array to be: [selectedElement, fetchMsg, loggedUSer, fetchElementData]",{"range":"117","text":"118"},"Update the dependencies array to be: [loggedUserId, user_friends]",{"range":"119","text":"120"},"Update the dependencies array to be: [get_users, searchText]",{"range":"121","text":"122"},[2857,2896],"[selectedElement, fetchMsg, loggedUSer, fetchElementData]",[2169,2183],"[loggedUserId, user_friends]",[2608,2620],"[get_users, searchText]"]