[{"P:\\react+flask\\ChatApp\\src\\index.tsx":"1","P:\\react+flask\\ChatApp\\src\\Styles.tsx":"2","P:\\react+flask\\ChatApp\\src\\Components\\Chat.tsx":"3","P:\\react+flask\\ChatApp\\src\\Components\\Logged.tsx":"4","P:\\react+flask\\ChatApp\\src\\Containers\\StartGreet.tsx":"5","P:\\react+flask\\ChatApp\\src\\Containers\\Register.tsx":"6","P:\\react+flask\\ChatApp\\src\\Containers\\Login.tsx":"7","P:\\react+flask\\ChatApp\\src\\Components\\App.tsx":"8","P:\\react+flask\\ChatApp\\src\\Containers\\InputField.tsx":"9","P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenPerson.tsx":"10","P:\\react+flask\\ChatApp\\src\\Containers\\ChatList.tsx":"11","P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenChat.tsx":"12","P:\\react+flask\\ChatApp\\src\\Containers\\FriendsList.tsx":"13","P:\\react+flask\\ChatApp\\src\\Containers\\Friend.tsx":"14"},{"size":422,"mtime":1610839600701,"results":"15","hashOfConfig":"16"},{"size":4049,"mtime":1610725099724,"results":"17","hashOfConfig":"16"},{"size":2616,"mtime":1610839600700,"results":"18","hashOfConfig":"16"},{"size":3152,"mtime":1610839600709,"results":"19","hashOfConfig":"16"},{"size":210,"mtime":1610750225797,"results":"20","hashOfConfig":"16"},{"size":2242,"mtime":1610839600701,"results":"21","hashOfConfig":"16"},{"size":1327,"mtime":1610839600701,"results":"22","hashOfConfig":"16"},{"size":5026,"mtime":1610839600700,"results":"23","hashOfConfig":"16"},{"size":658,"mtime":1610839553485,"results":"24","hashOfConfig":"16"},{"size":452,"mtime":1610839569185,"results":"25","hashOfConfig":"16"},{"size":677,"mtime":1610839600701,"results":"26","hashOfConfig":"16"},{"size":198,"mtime":1610839571858,"results":"27","hashOfConfig":"16"},{"size":766,"mtime":1610839600701,"results":"28","hashOfConfig":"16"},{"size":849,"mtime":1610839600700,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tervze",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"P:\\react+flask\\ChatApp\\src\\index.tsx",[],"P:\\react+flask\\ChatApp\\src\\Styles.tsx",[],["61","62"],"P:\\react+flask\\ChatApp\\src\\Components\\Chat.tsx",["63"],"import { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { ChatMain, ActualChat, Message, MsgHandle } from \"../Styles\";\r\nimport ChoosenPerson from \"../Containers/ChoosenPerson\";\r\nimport { SelElementI } from \"./Logged\";\r\nimport ChoosenChat from \"../Containers/ChoosenChat\";\r\nimport StartGreet from \"../Containers/StartGreet\";\r\ninterface ChatI {\r\n  logOut: () => any;\r\n  selectedUser: SelElementI;\r\n  loggedUserId: number;\r\n}\r\ninterface MessageI {\r\n  message_id: number;\r\n  message_sender_id: number;\r\n  message_group_id: number;\r\n  message_text: string;\r\n  message_type: string;\r\n  message_img_link?: string;\r\n  message_send_date: Date;\r\n}\r\nconst Chat = ({ logOut, selectedUser, loggedUserId }: ChatI) => {\r\n  const [sUserInfo, setSUserInfo] = useState({});\r\n  const [messages, setMessages] = useState([]);\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      const userResponse = await fetch(`/user_info`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          content_type: \"application/json\",\r\n        },\r\n        body: JSON.stringify({ id: selectedUser.id }),\r\n      });\r\n      const userData = await userResponse.json();\r\n      await setSUserInfo(userData);\r\n    };\r\n    if (selectedUser.id !== 0 && selectedUser.type === \"friend\") fetchUserData();\r\n  }, [selectedUser]);\r\n\r\n  return (\r\n    <ChatMain>\r\n      {selectedUser.type === \"friend\" ? (\r\n        <ChoosenPerson\r\n          logOut={logOut}\r\n          user_image={sUserInfo.user_image_link}\r\n          user_name={sUserInfo.user_name}\r\n        />\r\n      ) : selectedUser.type === \"chat\" ? (\r\n        <ChoosenChat />\r\n      ) : (\r\n        <StartGreet />\r\n      )}\r\n\r\n      <ActualChat>\r\n        {messages.map((message: MessageI) => {\r\n          return (\r\n            <Message\r\n              loggedUser={message.message_sender_id === loggedUserId ? 1 : 0}\r\n            >\r\n              {message.message_text}\r\n            </Message>\r\n          );\r\n        })}\r\n        <Message loggedUser={0}>somerandom text shit</Message>\r\n        <Message loggedUser={1}>somerandom text shit</Message>\r\n        <Message loggedUser={0}>somerandom text shit</Message>\r\n        <Message loggedUser={1}>somerandom text shit</Message>\r\n        <Message loggedUser={1}>somerandom text shit</Message>\r\n        <Message loggedUser={0}>somerandom text shit</Message>\r\n        <Message loggedUser={1}>somerandom text shit</Message>\r\n        <button onClick={() => console.log(selectedUser)}>\r\n          selected user log\r\n        </button>\r\n      </ActualChat>\r\n      <MsgHandle></MsgHandle>\r\n    </ChatMain>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","P:\\react+flask\\ChatApp\\src\\Components\\Logged.tsx",["64","65","66"],"import React from \"react\";\r\nimport { Friend } from \"../Containers/Friend\";\r\nimport { ContactsList, ModeSelect, SearchBar, Constacts } from \"../Styles\";\r\nimport { useState, useEffect } from \"react\";\r\nimport FriendsList from \"../Containers/FriendsList\";\r\nimport ChatList from \"../Containers/ChatList\";\r\nexport interface SelElementI {\r\n  id: number;\r\n  type: \"friend\" | \"chat\" | \"start\";\r\n}\r\nexport interface UserO {\r\n  user_friends: number[];\r\n  loggedUserId: number;\r\n  selectedMode: string;\r\n  selectElement: ({ id, type }: SelElementI) => any;\r\n  selectMode: (mode: string) => any;\r\n}\r\nexport interface ElementI {\r\n  id: number;\r\n  name: string;\r\n  image_link: string;\r\n  status: boolean;\r\n}\r\n\r\nconst Logged = ({\r\n  user_friends,\r\n  loggedUserId,\r\n  selectedMode,\r\n  selectMode,\r\n  selectElement,\r\n}: UserO) => {\r\n  const [user_friends_data_list, setUser_friends_data_list] = useState([]);\r\n  const [user_chat_data_list, setuser_chat_data_list] = useState([]);\r\n  const [options, setOptions] = useState([\r\n    { label: \"Start\", value: \"startingPage\" },\r\n    { label: \"Friends\", value: \"friends\" },\r\n    { label: \"Chats\", value: \"chats\" },\r\n  ]);\r\n  useEffect(() => {\r\n    const fetchUserFriendsData = async () => {\r\n      const response = await fetch(`/friends_info`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          content_type: \"application/json\",\r\n        },\r\n        body: JSON.stringify({ ids: user_friends }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      await setUser_friends_data_list(data.list);\r\n    };\r\n    const fetchUserChatsData = async () => {\r\n      const response = await fetch(`/chats`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          content_type: \"application/json\",\r\n        },\r\n        body: JSON.stringify({ id: loggedUserId }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      await setuser_chat_data_list(data.list);\r\n    };\r\n    if (user_friends.length > 0) fetchUserFriendsData();\r\n    fetchUserChatsData();\r\n  }, [user_friends]);\r\n\r\n  return (\r\n    <ContactsList>\r\n      <ModeSelect\r\n        defaultValue={selectedMode}\r\n        onChange={(event: any) => {\r\n          selectMode(event.currentTarget.value);\r\n          if (event.currentTarget.value === \"startingPage\")\r\n            selectElement({ id: 0, type: \"start\" });\r\n        }}\r\n      >\r\n        {options.map((option: any) => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label}\r\n          </option>\r\n        ))}\r\n      </ModeSelect>\r\n      <SearchBar></SearchBar>\r\n      <Constacts big={user_friends.length > 10 ? 1 : 0}>\r\n        {selectedMode === \"friends\" ? (\r\n          <FriendsList\r\n            friends_data={user_friends_data_list}\r\n            loggedUserId={loggedUserId}\r\n            selectUser={selectElement}\r\n          />\r\n        ) : selectedMode === \"chats\" ? (\r\n          <ChatList\r\n            chats_data={user_chat_data_list}\r\n            loggedUserId={loggedUserId}\r\n            selectChat={selectElement}\r\n          />\r\n        ) : (\r\n          \"Greeting on chat app!\"\r\n        )}\r\n      </Constacts>\r\n    </ContactsList>\r\n  );\r\n};\r\n\r\nexport default Logged;\r\n","P:\\react+flask\\ChatApp\\src\\Containers\\StartGreet.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\Register.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\Login.tsx",[],"P:\\react+flask\\ChatApp\\src\\Components\\App.tsx",["67"],"P:\\react+flask\\ChatApp\\src\\Containers\\InputField.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenPerson.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\ChatList.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\ChoosenChat.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\FriendsList.tsx",[],"P:\\react+flask\\ChatApp\\src\\Containers\\Friend.tsx",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":24,"column":20,"nodeType":"74","messageId":"75","endLine":24,"endColumn":31},{"ruleId":"72","severity":1,"message":"76","line":2,"column":10,"nodeType":"74","messageId":"75","endLine":2,"endColumn":16},{"ruleId":"72","severity":1,"message":"77","line":34,"column":19,"nodeType":"74","messageId":"75","endLine":34,"endColumn":29},{"ruleId":"78","severity":1,"message":"79","line":66,"column":6,"nodeType":"80","endLine":66,"endColumn":20,"suggestions":"81"},{"ruleId":"72","severity":1,"message":"82","line":88,"column":9,"nodeType":"74","messageId":"75","endLine":88,"endColumn":19},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"@typescript-eslint/no-unused-vars","'setMessages' is assigned a value but never used.","Identifier","unusedVar","'Friend' is defined but never used.","'setOptions' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loggedUserId'. Either include it or remove the dependency array.","ArrayExpression",["85"],"'deleteUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [loggedUserId, user_friends]",{"range":"88","text":"89"},[1958,1972],"[loggedUserId, user_friends]"]